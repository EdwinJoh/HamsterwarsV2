@inject IRequestService _service
@inject NavigationManager _nav
<div class="column">
    <div class="flip-card">
        <div class="flip-card-inner">
            <div class="flip-card-front">
                <img src="Content/@hamster.ImgName" alt="Avatar" style="width:300px; height:300px">
            </div>
            <div class="flip-card-back">
                <h1 class="text-">Name: <a class="text-black"href="/matchWinner/@hamster.Id">@hamster.Name</a></h1>
                <p>Favourite Food: @hamster.FavFood</p>
                <p>Favourite Activity: @hamster.Loves</p>
                <p>Wins: @hamster.Wins</p>
                <p>Defeats: @hamster.Defeats</p>
                <p>Games: @hamster.Games</p>

                <button type="button" @onclick="(() => RemoveHamster(hamster))" class="btn btn-danger">REMOVE</button>
            </div>
        </div>
    </div>
</div>
@if (DeleteDialogOpen)
{
    <ModalComponent hamster="@hamster" OnClose="@OnDeleteDialogClose"></ModalComponent>
}
@code {
    [Parameter]
    public Hamster hamster { get; set; }
    public bool DeleteDialogOpen { get; set; } = false;

    public async Task RemoveHamster(Hamster hamster)
    {
        DeleteDialogOpen = true;
        await _service.RemoveObjectAsync<Hamster>("hamster", hamster.Id);
    }
    private void OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        _nav.NavigateTo(_nav.Uri, forceLoad: true);


    }

}
